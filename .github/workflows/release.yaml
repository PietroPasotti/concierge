name: Release

on:
  push:
    tags:
      - v*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  binaries:
    name: Build concierge
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Run tests
        run: |
          go test -v ./...

      - name: Setup goreleaser
        run: |
          sudo snap install --classic goreleaser

      - name: Build concierge
        id: build
        run: |
          goreleaser build --snapshot --clean
          cp dist/concierge_linux_amd64_v1/concierge .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary
          path: ./concierge

  define-matrix:
    name: Define spread matrix
    runs-on: ubuntu-24.04
    outputs:
      suites: ${{ steps.suites.outputs.suites }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5

      - name: Install
        run: |
          go install github.com/snapcore/spread/cmd/spread@latest

      - name: Generate matrix list
        id: suites
        run: |
          list="$(spread -list github-ci | sed "s|github-ci:ubuntu-24.04:tests/||g" | jq -r -ncR '[inputs | select(length>0)]')"
          echo "suites=$list"
          echo "suites=$list" >> $GITHUB_OUTPUT

  spread-test:
    name: Spread (${{ matrix.suite }})
    runs-on: ubuntu-24.04
    needs:
      - binaries
      - define-matrix
    strategy:
      fail-fast: false
      matrix:
        suite: ${{ fromJSON(needs.define-matrix.outputs.suites) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: binary

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Install
        run: |
          go install github.com/snapcore/spread/cmd/spread@latest

      - name: Run integration tests
        run: |
          spread -v "github-ci:ubuntu-24.04:tests/${{ matrix.suite }}"

  release:
    name: Release concierge
    runs-on: ubuntu-latest
    needs:
      - spread-test
    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Setup goreleaser
        run: |
          sudo snap install --classic goreleaser

      - name: Release concierge
        id: build
        run: |
          goreleaser release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  snap:
    name: Build and Release snap
    runs-on: ubuntu-latest
    environment: main
    needs:
      - spread-test
    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup LXD
        uses: canonical/setup-lxd@main

      - name: Setup Snapcraft
        env:
          LP_BUILD_SECRET: ${{ secrets.LP_BUILD_SECRET }}
        run: |
          sudo snap install snapcraft --classic

          mkdir -p ~/.local/share/snapcraft/provider/launchpad ~/.local/share/snapcraft
          echo "${LP_BUILD_SECRET}" > ~/.local/share/snapcraft/provider/launchpad/credentials
          echo "${LP_BUILD_SECRET}" > ~/.local/share/snapcraft/launchpad-credentials

          git config --global user.email "github-actions@github.com"
          git config --global user.name "Github Actions"

      - name: Build snap
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "::group::remote-build output"
          snapcraft remote-build --launchpad-accept-public-upload
          echo "::endgroup::"

          echo "::group::amd64 build log"
          cat "snapcraft-concierge-*_amd64_*.txt"
          echo "::endgroup::"

          echo "::group::arm64 build log"
          cat "snapcraft-concierge-*_arm64_*.txt"
          echo "::endgroup::"

      # TODO: Uncomment once the snap classic confinement is granted
      # - name: Release snap to candidate
      #   env:
      #     SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.STORE_SECRET }}
      #   run: |
      #     snapcraft upload "concierge_*_amd64.snap" --release latest/candidate
      #     snapcraft upload "concierge_*_arm64.snap" --release latest/candidate
